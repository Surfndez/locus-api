// apply plugins
apply plugin: 'com.android.library'
apply plugin: "kotlin-android"
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"

// Android basics
android {
    compileSdkVersion Integer.valueOf(PARAM_COMPILE_SDK_VERSION)
    buildToolsVersion ANDROID_BUILD_TOOLS

    // define default parameters
    defaultConfig {
        minSdkVersion Integer.valueOf(PARAM_MIN_SDK_VERSION)
        targetSdkVersion Integer.valueOf(PARAM_TARGET_SDK_VERSION)

        versionCode Integer.valueOf(API_CODE)
        versionName API_VERSION
    }

    // enable support for Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    // Kotlin
    api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:' + KOTLIN_VERSION
    api 'androidx.annotation:annotation:1.1.0'

    // use in case of direct handling over Locus Core project
    debugApi project(':locus-api-core')
    // use in case of publishing to Maven. 'api' needs to be set in artifact as well
    releaseApi 'com.asamm:locus-api-core:' + API_VERSION
}

task createSourceJar(type: Jar) {
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes = ['**/*.kt']
    failOnError = false
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task createJavadocJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// generate publication in Maven format
// https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
project.afterEvaluate {
    publishing {
        publications {
            Release(MavenPublication) {
                // define sources
                //artifact("${project.buildDir}/outputs/aar/${project.name}-release.aar")
                artifact bundleReleaseAar
                artifact createSourceJar
                artifact createJavadocJar

                // set parameters
                groupId 'com.asamm'
                artifactId 'locus-api-android'
                //noinspection GroovyAssignabilityCheck
                version API_VERSION

                // improve generated POM file
                pom.withXml {
                    asNode().appendNode(
                            'name', 'Locus API - Android')
                    asNode().appendNode(
                            'description', 'Library for Android "Locus Map" application')
                    asNode().appendNode(
                            'url', 'https://github.com/asamm/locus-api-android')
                    asNode().appendNode(
                            'inceptionYear', '2017')

                    // add license
                    def nodeLicenses = asNode().appendNode('licenses')
                    def nodeLicense = nodeLicenses.appendNode('license')
                    nodeLicense.appendNode('name', 'GNU Lesser General Public License v3.0')
                    nodeLicense.appendNode('url', 'https://api.github.com/licenses/lgpl-3.0')
                    nodeLicense.appendNode('distribution', 'repo')

                    // add "scm"
                    def nodeScm = asNode().appendNode('scm')
                    nodeScm.appendNode('connection', 'git://github.com/asamm/locus-api-android.git')
                    nodeScm.appendNode('url', 'git://github.com/asamm/locus-api-android.git')

                    // add "developer info"
                    def nodeDevelopers = asNode().appendNode('developers')
                    def nodeDeveloper = nodeDevelopers.appendNode('developer')
                    nodeDeveloper.appendNode('name', 'Asamm software, s. r. o.')

                    // iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.releaseApi.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependencies.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

// upload library to BinTray
// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Release']
    publish = true
    override = true

    pkg {
        repo = 'maven'
        name = 'locus-api-android'
        licenses = ['LGPL-3.0']
        vcsUrl = 'https://github.com/asamm/locus-api.git'

        // optional Github repository
        githubRepo = 'asamm/locus-api'
        // optional Github readme file
        githubReleaseNotesFile = 'README.md'

        //noinspection GroovyAssignabilityCheck
        version {
            name = API_VERSION
            desc = 'Locus API - Android, version ' + API_VERSION
            released  = new Date()
            vcsTag = API_VERSION
        }
    }
}